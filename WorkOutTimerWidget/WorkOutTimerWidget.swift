//
//  WorkOutTimerWidget.swift
//  WorkOutTimerWidget
//
//  Created by ÍπÄÌÉúÌõà on 3/13/25.
//

import WidgetKit
import SwiftUI

struct Provider: AppIntentTimelineProvider {
    private struct Constants {
        static let appGroupIdentifier = "group.com.th.WorkOutTimer"
        static let workEndTimeKey = "workEndTime"
        static let workStartTimeKey = "workStartTime"
        static let workDateKey = "workDate"
    }
    
    private let defaults: UserDefaults
    
    init() {
        self.defaults = UserDefaults(suiteName: Constants.appGroupIdentifier) ?? .standard
    }
    
    func placeholder(in context: Context) -> SimpleEntry {
        return SimpleEntry(
            date: .now,
            configuration: ConfigurationAppIntent(),
            endDate: Date().addingTimeInterval(3600),
            isValidWork: false,
            widgetFamily: context.family
        )
    }
    
    func snapshot(for configuration: ConfigurationAppIntent, in context: Context) async -> SimpleEntry {
        let (endDate, isValid) = getWorkStatus()
        return SimpleEntry(
            date: .now,
            configuration: configuration,
            endDate: endDate,
            isValidWork: isValid,
            widgetFamily: context.family
        )
    }
    
    func timeline(for configuration: ConfigurationAppIntent, in context: Context) async -> Timeline<SimpleEntry> {
        let currentDate = Date()
        let (endDate, isValid) = getWorkStatus()
        
        let entry = SimpleEntry(
            date: currentDate,
            configuration: configuration,
            endDate: endDate,
            isValidWork: isValid,
            widgetFamily: context.family
        )
        
        if isValid {
            // ‚ú® Í∞ÑÎã®Ìïú ÌÉÄÏûÑÎùºÏù∏: Ìá¥Í∑º ÏãúÍ∞Ñ + 1Î∂Ñ ÌõÑÏóê Ìïú Î≤àÎßå ÏóÖÎç∞Ïù¥Ìä∏
            let refreshTime = endDate.addingTimeInterval(60) // Ìá¥Í∑º ÌõÑ 1Î∂Ñ Îí§ ÏÉàÎ°úÍ≥†Ïπ®
            return Timeline(entries: [entry], policy: .after(refreshTime))
        } else {
            // üéâ Í∑ºÎ¨¥ÌïòÏßÄ ÏïäÏùå: ÏóÖÎç∞Ïù¥Ìä∏ ÏïàÌï®
            return Timeline(entries: [entry], policy: .never)
        }
    }
    
    // üîç ÌòÑÏû¨ Í∑ºÎ¨¥ ÏÉÅÌÉú ÌôïÏù∏ Î∞è ÎßåÎ£åÎêú Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
    private func getWorkStatus() -> (Date, Bool) {
        let endTime = defaults.double(forKey: Constants.workEndTimeKey)
        let workDateString = defaults.string(forKey: Constants.workDateKey)
        
        // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
        guard endTime > 0 else {
            return (Date().addingTimeInterval(3600), false)
        }
        
        let endDate = Date(timeIntervalSince1970: endTime)
        let currentDate = Date()
        
        // üóìÔ∏è ÎÇ†Ïßú Í≤ÄÏ¶ù
        let today = Self.dateFormatter.string(from: currentDate)
        let isValidWorkDay = workDateString == today
        
        // üï∞Ô∏è ÏãúÍ∞Ñ Í≤ÄÏ¶ù (Ìá¥Í∑º ÏãúÍ∞ÑÏù¥ ÏßÄÎÇ¨ÎäîÏßÄ)
        let isWorkTimeValid = endDate > currentDate
        
        let isValidWork = isValidWorkDay && isWorkTimeValid
        
        // üßπ ÎßåÎ£åÎêú Îç∞Ïù¥ÌÑ∞ ÏûêÎèô Ï†ïÎ¶¨
        if !isValidWork && endTime > 0 {
            print("üßπ ÏúÑÏ†ØÏóêÏÑú ÎßåÎ£åÎêú Í∑ºÎ¨¥ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨")
            defaults.set(0, forKey: Constants.workEndTimeKey)
            defaults.removeObject(forKey: Constants.workStartTimeKey)
            defaults.removeObject(forKey: Constants.workDateKey)
        }
        
        return (endDate, isValidWork)
    }
    
    // ÎÇ†Ïßú Ìè¨Îß∑ÌÑ∞
    private static let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        formatter.locale = Locale(identifier: "ko_KR")
        formatter.timeZone = TimeZone(identifier: "Asia/Seoul")
        return formatter
    }()
}

struct SimpleEntry: TimelineEntry {
    let date: Date
    let configuration: ConfigurationAppIntent
    let endDate: Date
    let isValidWork: Bool
    let widgetFamily: WidgetFamily
}

struct TimerWidgetEntryView: View {
    var entry: Provider.Entry
    
    // ÏãúÍ∞Ñ Ìè¨Îß∑ÌÑ∞
    private static let timeFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm"
        formatter.locale = Locale(identifier: "ko_KR")
        formatter.timeZone = TimeZone(identifier: "Asia/Seoul")
        return formatter
    }()
    
    var formattedEndTime: String {
        Self.timeFormatter.string(from: entry.endDate)
    }
    
    var body: some View {
        Group {
            switch entry.widgetFamily {
            case .systemSmall:
                SmallWidgetView(entry: entry, formattedEndTime: formattedEndTime)
            case .systemMedium:
                MediumWidgetView(entry: entry, formattedEndTime: formattedEndTime)
            case .accessoryCircular:
                CircularWidgetView(entry: entry)
            case .accessoryRectangular:
                RectangularWidgetView(entry: entry, formattedEndTime: formattedEndTime)
            case .accessoryInline:
                InlineWidgetView(entry: entry)
            default:
                SmallWidgetView(entry: entry, formattedEndTime: formattedEndTime)
            }
        }
        .widgetURL(URL(string: "workoutTimer://open"))
        .containerBackground(.fill.tertiary, for: .widget)
    }
}

// MARK: - Widget Size Views

struct SmallWidgetView: View {
    let entry: Provider.Entry
    let formattedEndTime: String
    
    var body: some View {
        VStack(spacing: 2) {
            if Date() < entry.endDate {
                Text("Ìá¥Í∑ºÍπåÏßÄ")
                    .font(.system(size: 12))
                // ‚ú® SwiftUI ÏûêÎèô ÌÉÄÏù¥Î®∏ - 0Ïóê ÎèÑÎã¨ÌïòÎ©¥ ÏûêÎèô Ï†ïÏßÄ
                Text(entry.endDate, style: .timer)
                    .monospacedDigit()
                    .font(.system(size: 20, weight: .bold))
                    .frame(maxWidth: .infinity)
                    .multilineTextAlignment(.center)
                Text("üè† \(formattedEndTime)")
                    .font(.system(size: 14, weight: .semibold))
            } else {
                VStack(spacing: 4) {
                    Text("üéâ")
                        .font(.system(size: 32))
                    Text("Ìá¥Í∑ºÏù¥Îã§!")
                        .font(.system(size: 16, weight: .bold))
                        .multilineTextAlignment(.center)
                    Text("ÏàòÍ≥†ÌïòÏÖ®ÏäµÎãàÎã§!")
                        .font(.system(size: 10))
                        .foregroundColor(.secondary)
                }
            }
        }
        .padding(.all, 8)
    }
}

struct MediumWidgetView: View {
    let entry: Provider.Entry
    let formattedEndTime: String
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                if Date() < entry.endDate {
                    Text("Ìá¥Í∑ºÍπåÏßÄ")
                        .font(.headline)
                    // ‚ú® SwiftUI ÏûêÎèô ÌÉÄÏù¥Î®∏ - 0Ïóê ÎèÑÎã¨ÌïòÎ©¥ ÏûêÎèô Ï†ïÏßÄ
                    Text(entry.endDate, style: .timer)
                        .monospacedDigit()
                        .font(.system(size: 32, weight: .bold))
                    Text("üè† \(formattedEndTime)Ïóê Ìá¥Í∑º")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                } else {
                    Text("üéâ ÏàòÍ≥†ÌïòÏÖ®ÏäµÎãàÎã§!")
                        .font(.title2)
                        .fontWeight(.bold)
                    Text("Ïò§Îäò ÌïòÎ£®ÎèÑ Í≥†ÏÉù ÎßéÏúºÏÖ®Ïñ¥Ïöî")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    Text("Ìëπ Ïâ¨ÏÑ∏Ïöî! üòä")
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .padding(.top, 2)
                }
            }
            Spacer()
        }
        .padding()
    }
}

struct CircularWidgetView: View {
    let entry: Provider.Entry
    
    var body: some View {
        if Date() < entry.endDate {
            // ‚ú® SwiftUI ÏûêÎèô ÌÉÄÏù¥Î®∏ - 0Ïóê ÎèÑÎã¨ÌïòÎ©¥ ÏûêÎèô Ï†ïÏßÄ
            Text(entry.endDate, style: .timer)
                .monospacedDigit()
                .font(.system(size: 14, weight: .bold))
                .multilineTextAlignment(.center)
        } else {
            Text("ÏôÑÎ£å")
                .font(.system(size: 12, weight: .bold))
        }
    }
}

struct RectangularWidgetView: View {
    let entry: Provider.Entry
    let formattedEndTime: String
    
    var body: some View {
        HStack {
            Spacer()
            VStack(alignment: .center, spacing: 2) {
                if Date() < entry.endDate {
                    Text("Ìá¥Í∑ºÍπåÏßÄ")
                        .font(.caption2)
                    // ‚ú® SwiftUI ÏûêÎèô ÌÉÄÏù¥Î®∏ - 0Ïóê ÎèÑÎã¨ÌïòÎ©¥ ÏûêÎèô Ï†ïÏßÄ
                    Text(entry.endDate, style: .timer)
                        .monospacedDigit()
                        .font(.system(size: 16, weight: .bold))
                    Text("üè† \(formattedEndTime)")
                        .font(.caption2)
                } else {
                    Text("Ìá¥Í∑º ÏôÑÎ£å!")
                        .font(.system(size: 14, weight: .bold))
                }
            }
            Spacer()
        }
    }
}

struct InlineWidgetView: View {
    let entry: Provider.Entry
    
    var body: some View {
        if Date() < entry.endDate {
            // ‚ú® SwiftUI ÏûêÎèô ÌÉÄÏù¥Î®∏ - 0Ïóê ÎèÑÎã¨ÌïòÎ©¥ ÏûêÎèô Ï†ïÏßÄ
            Text("Ìá¥Í∑ºÍπåÏßÄ \(entry.endDate, style: .timer)")
                .monospacedDigit()
        } else {
            Text("Ìá¥Í∑º ÏôÑÎ£å!")
        }
    }
}

struct WorkOutTimerWidget: Widget {
    let kind: String = "com.th.WorkOutTimer.WorkOutTimerWidget"
    
    var body: some WidgetConfiguration {
        AppIntentConfiguration(kind: kind, intent: ConfigurationAppIntent.self, provider: Provider()) { entry in
            TimerWidgetEntryView(entry: entry)
                .containerBackground(.fill.tertiary, for: .widget)
        }
        .configurationDisplayName("Ìá¥Í∑º ÌÉÄÏù¥Î®∏")
        .description("Ìá¥Í∑ºÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞ÑÏùÑ Î≥¥Ïó¨Ï§çÎãàÎã§.")
        .supportedFamilies([.systemSmall, .systemMedium, .accessoryCircular, .accessoryRectangular, .accessoryInline])
        .contentMarginsDisabled()
    }
}

#Preview(as: .systemSmall) {
    WorkOutTimerWidget()
} timeline: {
    SimpleEntry(
        date: .now,
        configuration: ConfigurationAppIntent(),
        endDate: .now.addingTimeInterval(32400),
        isValidWork: true,
        widgetFamily: .systemSmall
    )
}
